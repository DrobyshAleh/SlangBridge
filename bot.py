import logging
import asyncio
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

from lang import texts  # –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö, –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å —ç—Ç–æ—Ç –º–æ–¥—É–ª—å

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not API_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

if not ADMIN_ID or not ADMIN_ID.isdigit():
    raise ValueError("ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

ADMIN_ID = int(ADMIN_ID)

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –•—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ user_id)
user_lang: dict[int, str] = {}

# –°–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–µ –Ω–∞–¥–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É)
proposed_posts: list[dict] = []
published_posts: list[dict] = []


class PostForm(StatesGroup):
    waiting_for_text = State()
    waiting_for_images = State()


def main_menu(lang: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=texts[lang]["learn_polish"])],
            [KeyboardButton(text=texts[lang]["about"])],
            [KeyboardButton(text=texts[lang]["announcements"])],
            [KeyboardButton(text=texts[lang]["forum_menu"])],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
    )


def forum_menu(lang: str, is_admin: bool = False) -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text=texts[lang]["propose_post"])],
        [KeyboardButton(text=texts[lang]["forum_show"])],
    ]
    if is_admin:
        buttons.append([KeyboardButton(text=texts[lang]["view_pending"])])
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=False,
    )


@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    logging.info(f"User {message.from_user.id} –≤—ã–∑–≤–∞–ª /start")
    lang_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang:ru")],
        [InlineKeyboardButton(text="Polski üáµüá±", callback_data="lang:pl")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Wybierz jƒôzyk:", reply_markup=lang_keyboard)


@dp.callback_query(F.data.startswith("lang:"))
async def set_language(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    lang = callback.data.split(":")[1]
    user_lang[callback.from_user.id] = lang
    logging.info(f"User {callback.from_user.id} –≤—ã–±—Ä–∞–ª —è–∑—ã–∫ {lang}")
    text = texts[lang]["menu_title"]
    keyboard = main_menu(lang)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(text, reply_markup=keyboard)


@dp.message()
async def menu_handler(message: Message, state: FSMContext):
    lang = user_lang.get(message.from_user.id, "ru")
    text = message.text

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    current_state = await state.get_state()
    if current_state is not None:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ —Å–ª–µ—Ç–µ—Ç—å –∏–∑ FSM
        return

    if text == texts[lang]["learn_polish"]:
        await message.answer(texts[lang].get("learn_polish_text", "–¢—É—Ç –±—É–¥–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –ø–æ–ª—å—Å–∫–æ–º—É."))

    elif text == texts[lang]["about"]:
        await message.answer(texts[lang].get("about_text", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å."))

    elif text == texts[lang]["announcements"]:
        await message.answer(texts[lang].get("announcements_text", "–ó–¥–µ—Å—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è."))

    elif text == texts[lang]["forum_menu"]:
        is_admin = message.from_user.id == ADMIN_ID
        keyboard = forum_menu(lang, is_admin)
        await message.answer(texts[lang]["forum_text"], reply_markup=keyboard)

    elif text == texts[lang]["propose_post"]:
        await message.answer(texts[lang]["enter_post"])
        await state.set_state(PostForm.waiting_for_text)

    elif text == texts[lang]["forum_show"]:
        if not published_posts:
            await message.answer(texts[lang]["no_posts"])
            return
        for post in published_posts:
            if post["images"]:
                media = [types.InputMediaPhoto(media=img) for img in post["images"]]
                await bot.send_media_group(message.from_user.id, media)
            await bot.send_message(message.from_user.id, post["text"])

    elif text == texts[lang]["view_pending"] and message.from_user.id == ADMIN_ID:
        if not proposed_posts:
            await message.answer(texts[lang]["no_pending_posts"])
            return
        for idx, post in enumerate(proposed_posts.copy()):
            media_group = [types.InputMediaPhoto(media=img_id) for img_id in post["images"]]
            if media_group:
                await bot.send_media_group(message.from_user.id, media=media_group)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text=texts[lang]["approve"], callback_data=f"approve:{idx}"),
                InlineKeyboardButton(text=texts[lang]["reject"], callback_data=f"reject:{idx}")
            ]])
            await bot.send_message(message.from_user.id, post["text"], reply_markup=keyboard)


@dp.message(PostForm.waiting_for_text)
async def receive_post_text(message: Message, state: FSMContext):
    if not message.text or not message.text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞.")
        return
    await state.update_data(post_text=message.text.strip(), images=[])
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ 10 —à—Ç—É–∫). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /done.\n–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done.")
    await state.set_state(PostForm.waiting_for_images)


@dp.message(PostForm.waiting_for_images, F.photo)
async def receive_post_images(message: Message, state: FSMContext):
    data = await state.get_data()
    images = data.get("images", [])
    if len(images) >= 10:
        await message.answer("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return
    file_id = message.photo[-1].file_id
    images.append(file_id)
    await state.update_data(images=images)
    await message.answer(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {len(images)} –ø—Ä–∏–Ω—è—Ç–æ.")


@dp.message(PostForm.waiting_for_images, Command("done"))
async def finish_post(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("post_text", "")
    images = data.get("images", [])
    if not text.strip():
        await message.answer("–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    proposed_posts.append({"user_id": message.from_user.id, "text": text, "images": images})
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    await state.clear()
    lang = user_lang.get(message.from_user.id, "ru")
    await message.answer(texts[lang]["menu_title"], reply_markup=main_menu(lang))


@dp.message(Command("done"))
async def done_out_of_context(message: Message):
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /done –≤–Ω–µ FSM
    await message.answer("–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç–µ –ø–æ—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞.")


@dp.callback_query(F.data.startswith("approve:"))
async def approve_post(callback: CallbackQuery):
    await callback.answer()
    lang = user_lang.get(callback.from_user.id, "ru")
    idx = int(callback.data.split(":")[1])
    if 0 <= idx < len(proposed_posts):
        post = proposed_posts.pop(idx)
        published_posts.append(post)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç —Å –ø–æ—Å—Ç–∞–º–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π ID –∫–∞–Ω–∞–ª–∞)
        # –ü—Ä–∏–º–µ—Ä: await bot.send_message(YOUR_CHANNEL_ID, post["text"], ...)

        if post["images"]:
            media_group = [types.InputMediaPhoto(media=img) for img in post["images"]]
            await bot.send_media_group(callback.from_user.id, media=media_group)
        await bot.send_message(callback.from_user.id, f"‚úÖ {texts[lang]['approved_post']}")

        try:
            await bot.send_message(post["user_id"], texts[lang]["your_post_approved"])
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    else:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


@dp.callback_query(F.data.startswith("reject:"))
async def reject_post(callback: CallbackQuery):
    await callback.answer()
    lang = user_lang.get(callback.from_user.id, "ru")
    idx = int(callback.data.split(":")[1])
    if 0 <= idx < len(proposed_posts):
        post = proposed_posts.pop(idx)
        await callback.message.answer(texts[lang]["rejected_post"])
        try:
            await bot.send_message(post["user_id"], texts[lang]["your_post_rejected"])
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    else:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


@dp.callback_query(F.data == "forum_show")
async def forum_show(callback: CallbackQuery):
    await callback.answer()
    lang = user_lang.get(callback.from_user.id, "ru")
    if not published_posts:
        await callback.message.answer(texts[lang]["no_posts"])
        return
    for post in published_posts:
        if post["images"]:
            media = [types.InputMediaPhoto(media=img) for img in post["images"]]
            await bot.send_media_group(callback.from_user.id, media)
        await bot.send_message(callback.from_user.id, post["text"])


async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
